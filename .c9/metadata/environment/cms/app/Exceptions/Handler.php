{"filter":false,"title":"Handler.php","tooltip":"/cms/app/Exceptions/Handler.php","undoManager":{"mark":1,"position":1,"stack":[[{"start":{"row":0,"column":0},"end":{"row":53,"column":0},"action":"remove","lines":["<?php","","namespace App\\Exceptions;","","use Exception;","use Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;","","class Handler extends ExceptionHandler","{","    /**","     * A list of the exception types that are not reported.","     *","     * @var array","     */","    protected $dontReport = [","        //","    ];","","    /**","     * A list of the inputs that are never flashed for validation exceptions.","     *","     * @var array","     */","    protected $dontFlash = [","        'password',","        'password_confirmation',","    ];","","    /**","     * Report or log an exception.","     *","     * This is a great spot to send exceptions to Sentry, Bugsnag, etc.","     *","     * @param  \\Exception  $exception","     * @return void","     */","    public function report(Exception $exception)","    {","        parent::report($exception);","    }","","    /**","     * Render an exception into an HTTP response.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @param  \\Exception  $exception","     * @return \\Illuminate\\Http\\Response","     */","    public function render($request, Exception $exception)","    {","        return parent::render($request, $exception);","    }","}",""],"id":3},{"start":{"row":0,"column":0},"end":{"row":54,"column":1},"action":"insert","lines":["<?php","namespace App\\Exceptions;","use Exception;","use Illuminate\\Auth\\AuthenticationException;","use Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;","class Handler extends ExceptionHandler","{","    /**","     * A list of the exception types that are not reported.","     *","     * @var array","     */","    protected $dontReport = [","        //","    ];","    /**","     * A list of the inputs that are never flashed for validation exceptions.","     *","     * @var array","     */","    protected $dontFlash = [","        'password',","        'password_confirmation',","    ];","    /**","     * Report or log an exception.","     *","     * @param  \\Exception  $exception","     * @return void","     */","    public function report(Exception $exception)","    {","        parent::report($exception);","    }","    /**","     * Render an exception into an HTTP response.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @param  \\Exception  $exception","     * @return \\Illuminate\\Http\\Response","     */","    public function render($request, Exception $exception)","    {","        return parent::render($request, $exception);","    }","    protected function unauthenticated($request, AuthenticationException $exception){","        if ($request->expectsJson()) {","            return response()->json(['error' => 'Unauthenticated.'], 401);","        }","        if (in_array('admin', $exception->guards())) { // ここから","            return redirect()->guest('admin/login');","        } // ここまで追記","        return redirect()->guest(route('login'));","    }","}"]}],[{"start":{"row":0,"column":0},"end":{"row":54,"column":1},"action":"remove","lines":["<?php","namespace App\\Exceptions;","use Exception;","use Illuminate\\Auth\\AuthenticationException;","use Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;","class Handler extends ExceptionHandler","{","    /**","     * A list of the exception types that are not reported.","     *","     * @var array","     */","    protected $dontReport = [","        //","    ];","    /**","     * A list of the inputs that are never flashed for validation exceptions.","     *","     * @var array","     */","    protected $dontFlash = [","        'password',","        'password_confirmation',","    ];","    /**","     * Report or log an exception.","     *","     * @param  \\Exception  $exception","     * @return void","     */","    public function report(Exception $exception)","    {","        parent::report($exception);","    }","    /**","     * Render an exception into an HTTP response.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @param  \\Exception  $exception","     * @return \\Illuminate\\Http\\Response","     */","    public function render($request, Exception $exception)","    {","        return parent::render($request, $exception);","    }","    protected function unauthenticated($request, AuthenticationException $exception){","        if ($request->expectsJson()) {","            return response()->json(['error' => 'Unauthenticated.'], 401);","        }","        if (in_array('admin', $exception->guards())) { // ここから","            return redirect()->guest('admin/login');","        } // ここまで追記","        return redirect()->guest(route('login'));","    }","}"],"id":6},{"start":{"row":0,"column":0},"end":{"row":54,"column":1},"action":"insert","lines":["<?php","namespace App\\Exceptions;","use Exception;","use Illuminate\\Auth\\AuthenticationException;","use Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;","class Handler extends ExceptionHandler","{","    /**","     * A list of the exception types that are not reported.","     *","     * @var array","     */","    protected $dontReport = [","        //","    ];","    /**","     * A list of the inputs that are never flashed for validation exceptions.","     *","     * @var array","     */","    protected $dontFlash = [","        'password',","        'password_confirmation',","    ];","    /**","     * Report or log an exception.","     *","     * @param  \\Exception  $exception","     * @return void","     */","    public function report(Exception $exception)","    {","        parent::report($exception);","    }","    /**","     * Render an exception into an HTTP response.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @param  \\Exception  $exception","     * @return \\Illuminate\\Http\\Response","     */","    public function render($request, Exception $exception)","    {","        return parent::render($request, $exception);","    }","    protected function unauthenticated($request, AuthenticationException $exception){","        if ($request->expectsJson()) {","            return response()->json(['error' => 'Unauthenticated.'], 401);","        }","        if (in_array('admin', $exception->guards())) { // ここから","            return redirect()->guest('admin/login');","        } // ここまで追記","        return redirect()->guest(route('login'));","    }","}"]}]]},"ace":{"folds":[],"scrolltop":583.2890625,"scrollleft":0,"selection":{"start":{"row":54,"column":1},"end":{"row":54,"column":1},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":39,"state":"php-doc-start","mode":"ace/mode/php"}},"timestamp":1566478486608,"hash":"07156a56b4ef4ca8b30a79904af93a609f02495c"}